@using DaveEvansTech.Helpers

@inject IJSRuntime JsRuntime
@inject BlazorTimerService TimerService
@implements IDisposable
<!-- This example requires Tailwind CSS v2.0+ -->
<div class="relative bg-white overflow-hidden">
    <div class="max-w-7xl mx-auto">


        <div class="relative z-10 pb-8 bg-white sm:pb-16 md:pb-20 lg:max-w-2xl lg:w-full lg:pb-28 xl:pb-32">

            @* polygon svg for angle effect *@
            <svg class="hidden lg:block absolute right-0 inset-y-0 h-full w-48 text-white transform translate-x-1/2" fill="white" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                <polygon points="50,0 100,0 50,100 0,100" />
            </svg>

            <div class="relative pt-6 sm:pt-10 px-4 sm:px-6 lg:px-8">
                @* Main body of hero section *@
                <main class="mt-2 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    <div class="sm:text-center lg:text-left">
                        <h1 class="text-4xl sm:text-5xl md:text-6xl tracking-tight font-extrabold text-gray-900">
                            <span class="block xl:inline">Web, mobile, &#38; OTT app development</span>
                            <span class="block text-primary xl:inline">under budget</span>
                        </h1>
                        <p class="mt-6 text-base text-gray-500 sm:mt-6 sm:text-lg sm:max-w-xl sm:mx-auto md:mt-6 md:text-xl lg:mx-0">
                            Modern app development can be <span class="italic">crazy</span> expensive. But it doesn't have to be!
                            Hi, I'm Dave, a long-time app developer. If you need an app developed on time and without spending a fortune, send a message or schedule a consultation and tell me about your project.
                        </p>
                        <div class="mt-6 block space-y-4 focus:outline-none md:flex md:flex-row md:justify-start md:space-y-0 md:space-x-4">
                            <PrimaryButton Path="https://daveevansllc.hbportal.co/schedule/61696aa24cd914002c3b963e" Width="w-full">Consultation</PrimaryButton>
                            <SecondaryButton Path="https://www.honeybook.com/widget/dave_evans_llc_179184/cf_id/605f1c502b239101cd9d80e6" Width="w-full">Get In Touch</SecondaryButton>
                        </div>
                    </div>
                </main>
            </div>


        </div>
    </div>

    <div class="@fadeInStyle">
        <div class="lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2">
            <img class="h-56 w-full object-contain lg:object-fill sm:h-72 md:h-96 lg:w-full lg:h-full"
                 src="@heroImgSrc" alt="">
        </div>
    </div>
</div>


@code
{

    private string timer = "";

    private string[] heroSlideImages = { "slide1.jpg", "slide8.png", "slide2.png", "slide3.jpg", "slide4.png", "slide5.png", "slide6.jpg", "slide7.png" };
    private int slideIndex = 0;
    string heroImgSrc = "";
    string fadeInStyle = "fade-in-slow";
    bool skip = true;
    bool timerInitialed = false;
    private const double IntervalMilliseconds = 2500;

    protected override async Task OnInitializedAsync()
    {
        heroImgSrc = $"images/hero_slides/{heroSlideImages[slideIndex]}";
        await NextSlide();
        await startTimer();
    }

    private async Task startTimer()
    {
        TimerService.SetTimer(IntervalMilliseconds, true);
        TimerService.OnElapsed +=
            async delegate { await NextSlide(); };
    }

    private async Task NextSlide()
    {
        // skipping allows for resetting fade-in style
        if (!skip)
        {
            slideIndex = (slideIndex + 1) >= heroSlideImages.Length ? 0 : ++slideIndex;
            heroImgSrc = $"images/hero_slides/{heroSlideImages[slideIndex]}";
            fadeInStyle = "fade-in-slow";

            timer = DateTime.Now.ToLongTimeString();
            await InvokeAsync(StateHasChanged);
            skip = true;
        }
        else
        {
            fadeInStyle = ""; // doesn't work unless it's reset
            await InvokeAsync(StateHasChanged);
            skip = false;
        }
    }

    public void Dispose()
    {
        TimerService.StopTimer();
    }

}