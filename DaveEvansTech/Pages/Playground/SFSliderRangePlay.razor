@page "/SFSliderRangePlay"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.RichTextEditor
<h3>SFSliderRangePlay</h3>


<div>
        <!-- Syncfusion rich text editor -->
          <SfRichTextEditor ShowCharCount="true"
                            MaxLength="2000"
                            EnableHtmlEncode="true"
                            @bind-Value="@Value1">
              <ChildContent>
                  <RichTextEditorToolbarSettings Items="@Tools"/>
              </ChildContent>
          </SfRichTextEditor>
</div>


<div class="w-1/2 mx-auto">
    <SfSlider ID="budget-slider" Min="0" Max="10000" Step="100" Type="SliderType.Range" @bind-Value="@_budgetRange" CssClass="e-slider-green">
                 <SliderEvents TValue="int[]"
                               OnChange="@(e => SliderValueChange(e))">
                 </SliderEvents>
                 <SliderTicks Placement="Placement.After" Format="C2" ShowSmallTicks="true" LargeStep="1000" SmallStep="100">
                 </SliderTicks>
                 @* <SliderTooltip IsVisible="true" Format="C2" Placement="TooltipPlacement.Before" ShowOn="TooltipShowOn.Always"></SliderTooltip> *@
             </SfSlider>
</div>





@code {

    private string Value1 = "";


    private int[] _budgetRange = {1000, 1500};
    
    
    int Value = 25;
    int TextBoxValue = 25;
    int Step = 1;
    int Min = 0;
    int Max = 100;
    bool ShowButtons = false;
    bool ReadOnly = false;
    bool Disabled = false;
    public void SliderValueChange(Syncfusion.Blazor.Inputs.SliderChangeEventArgs<int[]> args)
    {
        if (args.IsInteracted)
        {
            // _budgetRange = args.Value;
        }
    }
    
    
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() {Command = ToolbarCommand.Bold},
        new ToolbarItemModel() {Command = ToolbarCommand.Italic},
        new ToolbarItemModel() {Command = ToolbarCommand.Underline},
        new ToolbarItemModel() {Command = ToolbarCommand.StrikeThrough},
        new ToolbarItemModel() {Command = ToolbarCommand.FontName},
        new ToolbarItemModel() {Command = ToolbarCommand.FontSize},
        new ToolbarItemModel() {Command = ToolbarCommand.FontColor},
        new ToolbarItemModel() {Command = ToolbarCommand.BackgroundColor},
        new ToolbarItemModel() {Command = ToolbarCommand.LowerCase},
        new ToolbarItemModel() {Command = ToolbarCommand.UpperCase},
        new ToolbarItemModel() {Command = ToolbarCommand.SuperScript},
        new ToolbarItemModel() {Command = ToolbarCommand.SubScript},
        new ToolbarItemModel() {Command = ToolbarCommand.Separator},
        new ToolbarItemModel() {Command = ToolbarCommand.Formats},
        new ToolbarItemModel() {Command = ToolbarCommand.Alignments},
        new ToolbarItemModel() {Command = ToolbarCommand.OrderedList},
        new ToolbarItemModel() {Command = ToolbarCommand.UnorderedList},
        new ToolbarItemModel() {Command = ToolbarCommand.Outdent},
        new ToolbarItemModel() {Command = ToolbarCommand.Indent},
        new ToolbarItemModel() {Command = ToolbarCommand.Separator},
        new ToolbarItemModel() {Command = ToolbarCommand.CreateLink},
        new ToolbarItemModel() {Command = ToolbarCommand.Image},
        new ToolbarItemModel() {Command = ToolbarCommand.CreateTable},
        new ToolbarItemModel() {Command = ToolbarCommand.Separator},
        new ToolbarItemModel() {Command = ToolbarCommand.ClearFormat},
        new ToolbarItemModel() {Command = ToolbarCommand.Print},
        new ToolbarItemModel() {Command = ToolbarCommand.SourceCode},
        new ToolbarItemModel() {Command = ToolbarCommand.Separator},
        new ToolbarItemModel() {Command = ToolbarCommand.Undo},
        new ToolbarItemModel() {Command = ToolbarCommand.Redo}
    };
}